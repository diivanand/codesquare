This Repository contains both Front and Back-End code for the CodeSquare Jive
Web Application. 

------------------
TABLE OF CONTENTS (use ctrl-f/command-f to get to that part of this README)
------------------
BUILD/MODIFACATION INFO [BMI]
INFO AVAILABLE FOR DETERMINING BADGES [IADB]
ADDING BADGES [AB]
GIT COMMIT PROCESSING MECHANISMS [GCPM]
BASIC BADGE PROCESSING MECHANISMS  [BBPM]
MAPRDUCE COMPLEX BADGE PROCESSING MECHANISMS [MCBPM]
FRONT-END MECHANISMS [FEM]

-----------------------------
BUILD/MODIFICATION INFO [OMI]
-----------------------------
The Front-End Code can be found in CodeSquareApp although if you plan on modifying the code and want to see your changes, you should first ask a Jive Web Master to give you access to the CodeSquare Repo on JiveApps and then you should clone the  repo in a separate folder outside this git folder using the `jiveapps clone codesquare` terminal command. It is also recommended that you read all the documentation found in developers.jivesoftware.com if you plan on making permanent changes to the app.

The Back-End Code can be found in the CodeSquareJava folder, although a config  folder has been omitted from this repo in this repo to prevent the knowledge of private Jive URLs and other sensitive company-specific infrastructure data.

Needless to say, MapReduce Code used in our app can be found in the MapReduce folder but I'm saying this just in case it wasn't clear.

Both the CodeSquare Back-End Code and the MapReduces each have their own build.xml and two scripts exists in each folder to automatically build these two projects those scripts are run automatically when someone pushes to this Repository. The scripts also send the binary created from the build to their appropriate locations for deployment THEREFORE IT IS STRONGLY RECOMMENDED THAT YOUR CODE IS BATTLE-TESTED BEFORE PUSHING TO THE REPO.

--------------------------------------------
INFO AVAILABLE FOR DETERMINING BADGES [IADB]
--------------------------------------------
There are two places in our app where information can be used to determine new badges.  The first place in when the commits are being processed on the fly in BackEndServlet.java, where basic badges are determined.  Basic Badges consist of holiday badges, number of commit badges, and various other badges.  Information for these badges are stored in the Hbase under the qualifier name "Info" in the "EmpBadges" table.  Each user has their boss email, # of consecutive commits, jive id, last commit date, name, newBadges, number of bugs(currently not implemented), and number of commits. Also each awarded badge with have a key, value pair in this format "Badge:'insert badge number here'", 'unix time stamp of first received' an example would be "Badge:1", "1313509878".

The second place were information can be used is in the HDFS where the map reduces grab commit data from. The naming scheme of the folders in the HDFS is the push date of the commit.  For example, a push date of 10/24/2011, at 10:25am would be 2011/10/24/10/25/.  The commit is stored as a .txt file where the name of the file is the sha1 commit hash and the contents are in the the following format:

CommId EmpEmail seconds_since_1970 time_zone numFilesChanged filesChanged numInsertions numDeletions message
example:
3fd3fh345g eric.ren@jivesoftware.com 2109345234 GMT-7 3 [app.xml,hello.html,hi.jsp] 12 3 “this is a test”


------------------
ADDING BADGES [AB]
------------------

---------------------------------------
GIT COMMIT PROCESSING MECHANISMS [GCPM]
---------------------------------------

-----------------------------------------
BASIC BADGE PROCESSING MECHANISMS  [BBPM]
-----------------------------------------

----------------------------------------------------
MAPRDUCE COMPLEX BADGE PROCESSING MECHANISMS [MCBPM]
----------------------------------------------------

--------------------------
FRONT-END MECHANISMS [FEM]
--------------------------